// Copyright (c) 2005-2023 Code Synthesis.
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis gives permission
// to link this program with the Xerces-C++ library (or with modified
// versions of Xerces-C++ that use the same license as Xerces-C++), and
// distribute linked combinations including the two. You must obey the GNU
// General Public License version 2 in all respects for all of the code
// used other than Xerces-C++. If you modify this copy of the program, you
// may extend this exception to your version of the program, but you are
// not obligated to do so. If you do not wish to do so, delete this
// exception statement from your version.
//
// Furthermore, Code Synthesis makes a special exception for the Free/Libre
// and Open Source Software (FLOSS) which is described in the accompanying
// FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "Checkpoint.hxx"

// particle
//

const particle::velocity_type& particle::
velocity () const
{
  return this->velocity_.get ();
}

particle::velocity_type& particle::
velocity ()
{
  return this->velocity_.get ();
}

void particle::
velocity (const velocity_type& x)
{
  this->velocity_.set (x);
}

void particle::
velocity (::std::unique_ptr< velocity_type > x)
{
  this->velocity_.set (std::move (x));
}

const particle::force_type& particle::
force () const
{
  return this->force_.get ();
}

particle::force_type& particle::
force ()
{
  return this->force_.get ();
}

void particle::
force (const force_type& x)
{
  this->force_.set (x);
}

void particle::
force (::std::unique_ptr< force_type > x)
{
  this->force_.set (std::move (x));
}

const particle::old_force_type& particle::
old_force () const
{
  return this->old_force_.get ();
}

particle::old_force_type& particle::
old_force ()
{
  return this->old_force_.get ();
}

void particle::
old_force (const old_force_type& x)
{
  this->old_force_.set (x);
}

void particle::
old_force (::std::unique_ptr< old_force_type > x)
{
  this->old_force_.set (std::move (x));
}

const particle::position_type& particle::
position () const
{
  return this->position_.get ();
}

particle::position_type& particle::
position ()
{
  return this->position_.get ();
}

void particle::
position (const position_type& x)
{
  this->position_.set (x);
}

void particle::
position (::std::unique_ptr< position_type > x)
{
  this->position_.set (std::move (x));
}

const particle::mass_type& particle::
mass () const
{
  return this->mass_.get ();
}

particle::mass_type& particle::
mass ()
{
  return this->mass_.get ();
}

void particle::
mass (const mass_type& x)
{
  this->mass_.set (x);
}

const particle::type_type& particle::
type () const
{
  return this->type_.get ();
}

particle::type_type& particle::
type ()
{
  return this->type_.get ();
}

void particle::
type (const type_type& x)
{
  this->type_.set (x);
}

const particle::fixed_type& particle::
fixed () const
{
  return this->fixed_.get ();
}

particle::fixed_type& particle::
fixed ()
{
  return this->fixed_.get ();
}

void particle::
fixed (const fixed_type& x)
{
  this->fixed_.set (x);
}

const particle::is_membrane_type& particle::
is_membrane () const
{
  return this->is_membrane_.get ();
}

particle::is_membrane_type& particle::
is_membrane ()
{
  return this->is_membrane_.get ();
}

void particle::
is_membrane (const is_membrane_type& x)
{
  this->is_membrane_.set (x);
}


// membrane_pair
//

const membrane_pair::first_type& membrane_pair::
first () const
{
  return this->first_.get ();
}

membrane_pair::first_type& membrane_pair::
first ()
{
  return this->first_.get ();
}

void membrane_pair::
first (const first_type& x)
{
  this->first_.set (x);
}

const membrane_pair::second_type& membrane_pair::
second () const
{
  return this->second_.get ();
}

membrane_pair::second_type& membrane_pair::
second ()
{
  return this->second_.get ();
}

void membrane_pair::
second (const second_type& x)
{
  this->second_.set (x);
}

const membrane_pair::diagonal_type& membrane_pair::
diagonal () const
{
  return this->diagonal_.get ();
}

membrane_pair::diagonal_type& membrane_pair::
diagonal ()
{
  return this->diagonal_.get ();
}

void membrane_pair::
diagonal (const diagonal_type& x)
{
  this->diagonal_.set (x);
}


// vector
//

const vector::x_type& vector::
x () const
{
  return this->x_.get ();
}

vector::x_type& vector::
x ()
{
  return this->x_.get ();
}

void vector::
x (const x_type& x)
{
  this->x_.set (x);
}

const vector::y_type& vector::
y () const
{
  return this->y_.get ();
}

vector::y_type& vector::
y ()
{
  return this->y_.get ();
}

void vector::
y (const y_type& x)
{
  this->y_.set (x);
}

const vector::z_optional& vector::
z () const
{
  return this->z_;
}

vector::z_optional& vector::
z ()
{
  return this->z_;
}

void vector::
z (const z_type& x)
{
  this->z_.set (x);
}

void vector::
z (const z_optional& x)
{
  this->z_ = x;
}


// checkpoint
//

const checkpoint::particle_sequence& checkpoint::
particle () const
{
  return this->particle_;
}

checkpoint::particle_sequence& checkpoint::
particle ()
{
  return this->particle_;
}

void checkpoint::
particle (const particle_sequence& s)
{
  this->particle_ = s;
}

const checkpoint::membrane_pair_sequence& checkpoint::
membrane_pair () const
{
  return this->membrane_pair_;
}

checkpoint::membrane_pair_sequence& checkpoint::
membrane_pair ()
{
  return this->membrane_pair_;
}

void checkpoint::
membrane_pair (const membrane_pair_sequence& s)
{
  this->membrane_pair_ = s;
}


#include <xsd/cxx/xml/dom/parsing-source.hxx>

// particle
//

particle::
particle (const velocity_type& velocity,
          const force_type& force,
          const old_force_type& old_force,
          const position_type& position,
          const mass_type& mass,
          const type_type& type,
          const fixed_type& fixed,
          const is_membrane_type& is_membrane)
: ::xml_schema::type (),
  velocity_ (velocity, this),
  force_ (force, this),
  old_force_ (old_force, this),
  position_ (position, this),
  mass_ (mass, this),
  type_ (type, this),
  fixed_ (fixed, this),
  is_membrane_ (is_membrane, this)
{
}

particle::
particle (::std::unique_ptr< velocity_type > velocity,
          ::std::unique_ptr< force_type > force,
          ::std::unique_ptr< old_force_type > old_force,
          ::std::unique_ptr< position_type > position,
          const mass_type& mass,
          const type_type& type,
          const fixed_type& fixed,
          const is_membrane_type& is_membrane)
: ::xml_schema::type (),
  velocity_ (std::move (velocity), this),
  force_ (std::move (force), this),
  old_force_ (std::move (old_force), this),
  position_ (std::move (position), this),
  mass_ (mass, this),
  type_ (type, this),
  fixed_ (fixed, this),
  is_membrane_ (is_membrane, this)
{
}

particle::
particle (const particle& x,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  velocity_ (x.velocity_, f, this),
  force_ (x.force_, f, this),
  old_force_ (x.old_force_, f, this),
  position_ (x.position_, f, this),
  mass_ (x.mass_, f, this),
  type_ (x.type_, f, this),
  fixed_ (x.fixed_, f, this),
  is_membrane_ (x.is_membrane_, f, this)
{
}

particle::
particle (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  velocity_ (this),
  force_ (this),
  old_force_ (this),
  position_ (this),
  mass_ (this),
  type_ (this),
  fixed_ (this),
  is_membrane_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
    this->parse (p, f);
  }
}

void particle::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // velocity
    //
    if (n.name () == "velocity" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< velocity_type > r (
        velocity_traits::create (i, f, this));

      if (!velocity_.present ())
      {
        this->velocity_.set (::std::move (r));
        continue;
      }
    }

    // force
    //
    if (n.name () == "force" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< force_type > r (
        force_traits::create (i, f, this));

      if (!force_.present ())
      {
        this->force_.set (::std::move (r));
        continue;
      }
    }

    // old_force
    //
    if (n.name () == "old_force" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< old_force_type > r (
        old_force_traits::create (i, f, this));

      if (!old_force_.present ())
      {
        this->old_force_.set (::std::move (r));
        continue;
      }
    }

    // position
    //
    if (n.name () == "position" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< position_type > r (
        position_traits::create (i, f, this));

      if (!position_.present ())
      {
        this->position_.set (::std::move (r));
        continue;
      }
    }

    break;
  }

  if (!velocity_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "velocity",
      "");
  }

  if (!force_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "force",
      "");
  }

  if (!old_force_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "old_force",
      "");
  }

  if (!position_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "position",
      "");
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "mass" && n.namespace_ ().empty ())
    {
      this->mass_.set (mass_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "type" && n.namespace_ ().empty ())
    {
      this->type_.set (type_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "fixed" && n.namespace_ ().empty ())
    {
      this->fixed_.set (fixed_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "is_membrane" && n.namespace_ ().empty ())
    {
      this->is_membrane_.set (is_membrane_traits::create (i, f, this));
      continue;
    }
  }

  if (!mass_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "mass",
      "");
  }

  if (!type_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "type",
      "");
  }

  if (!fixed_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "fixed",
      "");
  }

  if (!is_membrane_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "is_membrane",
      "");
  }
}

particle* particle::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class particle (*this, f, c);
}

particle& particle::
operator= (const particle& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->velocity_ = x.velocity_;
    this->force_ = x.force_;
    this->old_force_ = x.old_force_;
    this->position_ = x.position_;
    this->mass_ = x.mass_;
    this->type_ = x.type_;
    this->fixed_ = x.fixed_;
    this->is_membrane_ = x.is_membrane_;
  }

  return *this;
}

particle::
~particle ()
{
}

// membrane_pair
//

membrane_pair::
membrane_pair (const first_type& first,
               const second_type& second,
               const diagonal_type& diagonal)
: ::xml_schema::type (),
  first_ (first, this),
  second_ (second, this),
  diagonal_ (diagonal, this)
{
}

membrane_pair::
membrane_pair (const membrane_pair& x,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  first_ (x.first_, f, this),
  second_ (x.second_, f, this),
  diagonal_ (x.diagonal_, f, this)
{
}

membrane_pair::
membrane_pair (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  first_ (this),
  second_ (this),
  diagonal_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, false, false, true);
    this->parse (p, f);
  }
}

void membrane_pair::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "first" && n.namespace_ ().empty ())
    {
      this->first_.set (first_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "second" && n.namespace_ ().empty ())
    {
      this->second_.set (second_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "diagonal" && n.namespace_ ().empty ())
    {
      this->diagonal_.set (diagonal_traits::create (i, f, this));
      continue;
    }
  }

  if (!first_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "first",
      "");
  }

  if (!second_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "second",
      "");
  }

  if (!diagonal_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "diagonal",
      "");
  }
}

membrane_pair* membrane_pair::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class membrane_pair (*this, f, c);
}

membrane_pair& membrane_pair::
operator= (const membrane_pair& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->first_ = x.first_;
    this->second_ = x.second_;
    this->diagonal_ = x.diagonal_;
  }

  return *this;
}

membrane_pair::
~membrane_pair ()
{
}

// vector
//

vector::
vector (const x_type& x,
        const y_type& y)
: ::xml_schema::type (),
  x_ (x, this),
  y_ (y, this),
  z_ (this)
{
}

vector::
vector (const vector& x,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  x_ (x.x_, f, this),
  y_ (x.y_, f, this),
  z_ (x.z_, f, this)
{
}

vector::
vector (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  x_ (this),
  y_ (this),
  z_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, false, false, true);
    this->parse (p, f);
  }
}

void vector::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "x" && n.namespace_ ().empty ())
    {
      this->x_.set (x_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "y" && n.namespace_ ().empty ())
    {
      this->y_.set (y_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "z" && n.namespace_ ().empty ())
    {
      this->z_.set (z_traits::create (i, f, this));
      continue;
    }
  }

  if (!x_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "x",
      "");
  }

  if (!y_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "y",
      "");
  }
}

vector* vector::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class vector (*this, f, c);
}

vector& vector::
operator= (const vector& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->x_ = x.x_;
    this->y_ = x.y_;
    this->z_ = x.z_;
  }

  return *this;
}

vector::
~vector ()
{
}

// checkpoint
//

checkpoint::
checkpoint ()
: ::xml_schema::type (),
  particle_ (this),
  membrane_pair_ (this)
{
}

checkpoint::
checkpoint (const checkpoint& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  particle_ (x.particle_, f, this),
  membrane_pair_ (x.membrane_pair_, f, this)
{
}

checkpoint::
checkpoint (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  particle_ (this),
  membrane_pair_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void checkpoint::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // particle
    //
    if (n.name () == "particle" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< particle_type > r (
        particle_traits::create (i, f, this));

      this->particle_.push_back (::std::move (r));
      continue;
    }

    // membrane_pair
    //
    if (n.name () == "membrane_pair" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< membrane_pair_type > r (
        membrane_pair_traits::create (i, f, this));

      this->membrane_pair_.push_back (::std::move (r));
      continue;
    }

    break;
  }
}

checkpoint* checkpoint::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class checkpoint (*this, f, c);
}

checkpoint& checkpoint::
operator= (const checkpoint& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->particle_ = x.particle_;
    this->membrane_pair_ = x.membrane_pair_;
  }

  return *this;
}

checkpoint::
~checkpoint ()
{
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

::std::unique_ptr< ::checkpoint >
checkpoint_ (const ::std::string& u,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::unique_ptr< ::checkpoint > (
    ::checkpoint_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::checkpoint >
checkpoint_ (const ::std::string& u,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::checkpoint > (
    ::checkpoint_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::checkpoint >
checkpoint_ (const ::std::string& u,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::checkpoint > (
    ::checkpoint_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::checkpoint >
checkpoint_ (::std::istream& is,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::checkpoint_ (isrc, f, p);
}

::std::unique_ptr< ::checkpoint >
checkpoint_ (::std::istream& is,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::checkpoint_ (isrc, h, f, p);
}

::std::unique_ptr< ::checkpoint >
checkpoint_ (::std::istream& is,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::checkpoint_ (isrc, h, f, p);
}

::std::unique_ptr< ::checkpoint >
checkpoint_ (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::checkpoint_ (isrc, f, p);
}

::std::unique_ptr< ::checkpoint >
checkpoint_ (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::checkpoint_ (isrc, h, f, p);
}

::std::unique_ptr< ::checkpoint >
checkpoint_ (::std::istream& is,
             const ::std::string& sid,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::checkpoint_ (isrc, h, f, p);
}

::std::unique_ptr< ::checkpoint >
checkpoint_ (::xercesc::InputSource& i,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::unique_ptr< ::checkpoint > (
    ::checkpoint_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::checkpoint >
checkpoint_ (::xercesc::InputSource& i,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::checkpoint > (
    ::checkpoint_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::checkpoint >
checkpoint_ (::xercesc::InputSource& i,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::checkpoint > (
    ::checkpoint_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::checkpoint >
checkpoint_ (const ::xercesc::DOMDocument& doc,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  if (f & ::xml_schema::flags::keep_dom)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

    return ::std::unique_ptr< ::checkpoint > (
      ::checkpoint_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "checkpoint" &&
      n.namespace_ () == "")
  {
    ::std::unique_ptr< ::checkpoint > r (
      ::xsd::cxx::tree::traits< ::checkpoint, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "checkpoint",
    "");
}

::std::unique_ptr< ::checkpoint >
checkpoint_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
             ::xml_schema::flags f,
             const ::xml_schema::properties&)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::flags::keep_dom) &&
     !(f & ::xml_schema::flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::flags::keep_dom)
    doc.setUserData (::xml_schema::dom::tree_node_key,
                     (c.get () ? &c : &d),
                     0);

  if (n.name () == "checkpoint" &&
      n.namespace_ () == "")
  {
    ::std::unique_ptr< ::checkpoint > r (
      ::xsd::cxx::tree::traits< ::checkpoint, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "checkpoint",
    "");
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

void
checkpoint_ (::std::ostream& o,
             const ::checkpoint& s,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::checkpoint_ (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
checkpoint_ (::std::ostream& o,
             const ::checkpoint& s,
             ::xml_schema::error_handler& h,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::checkpoint_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
checkpoint_ (::std::ostream& o,
             const ::checkpoint& s,
             ::xercesc::DOMErrorHandler& h,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::checkpoint_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
checkpoint_ (::xercesc::XMLFormatTarget& t,
             const ::checkpoint& s,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::checkpoint_ (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
checkpoint_ (::xercesc::XMLFormatTarget& t,
             const ::checkpoint& s,
             ::xml_schema::error_handler& h,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::checkpoint_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
checkpoint_ (::xercesc::XMLFormatTarget& t,
             const ::checkpoint& s,
             ::xercesc::DOMErrorHandler& h,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::checkpoint_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
checkpoint_ (::xercesc::DOMDocument& d,
             const ::checkpoint& s,
             ::xml_schema::flags)
{
  ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "checkpoint" &&
      n.namespace_ () == "")
  {
    e << s;
  }
  else
  {
    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "checkpoint",
      "");
  }
}

::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
checkpoint_ (const ::checkpoint& s,
             const ::xml_schema::namespace_infomap& m,
             ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::serialize< char > (
      "checkpoint",
      "",
      m, f));

  ::checkpoint_ (*d, s, f);
  return d;
}

void
operator<< (::xercesc::DOMElement& e, const particle& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // velocity
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "velocity",
        e));

    s << i.velocity ();
  }

  // force
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "force",
        e));

    s << i.force ();
  }

  // old_force
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "old_force",
        e));

    s << i.old_force ();
  }

  // position
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "position",
        e));

    s << i.position ();
  }

  // mass
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "mass",
        e));

    a << ::xml_schema::as_double(i.mass ());
  }

  // type
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "type",
        e));

    a << i.type ();
  }

  // fixed
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "fixed",
        e));

    a << i.fixed ();
  }

  // is_membrane
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "is_membrane",
        e));

    a << i.is_membrane ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const membrane_pair& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // first
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "first",
        e));

    a << i.first ();
  }

  // second
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "second",
        e));

    a << i.second ();
  }

  // diagonal
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "diagonal",
        e));

    a << i.diagonal ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const vector& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // x
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "x",
        e));

    a << ::xml_schema::as_double(i.x ());
  }

  // y
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "y",
        e));

    a << ::xml_schema::as_double(i.y ());
  }

  // z
  //
  if (i.z ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "z",
        e));

    a << ::xml_schema::as_double(*i.z ());
  }
}

void
operator<< (::xercesc::DOMElement& e, const checkpoint& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // particle
  //
  for (checkpoint::particle_const_iterator
       b (i.particle ().begin ()), n (i.particle ().end ());
       b != n; ++b)
  {
    const checkpoint::particle_type& x (*b);

    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "particle",
        e));

    s << x;
  }

  // membrane_pair
  //
  for (checkpoint::membrane_pair_const_iterator
       b (i.membrane_pair ().begin ()), n (i.membrane_pair ().end ());
       b != n; ++b)
  {
    const checkpoint::membrane_pair_type& x (*b);

    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "membrane_pair",
        e));

    s << x;
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

